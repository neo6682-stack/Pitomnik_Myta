import { Pool } from 'pg';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

dotenv.config();

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: parseInt(process.env.DB_PORT || '5432'),
});

export async function initDatabase() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ß–∏—Ç–∞–µ–º —Å—Ö–µ–º—É –∏–∑ —Ñ–∞–π–ª–∞
    const schemaPath = path.join(__dirname, '../../../database/schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ö–µ–º—É
    await pool.query(schema);
    console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    const plantsCount = await pool.query('SELECT COUNT(*) FROM plants');
    const categoriesCount = await pool.query('SELECT COUNT(*) FROM categories');
    
    console.log(`üìä –†–∞—Å—Ç–µ–Ω–∏–π –≤ –ë–î: ${plantsCount.rows[0].count}`);
    console.log(`üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: ${categoriesCount.rows[0].count}`);
    
    if (parseInt(plantsCount.rows[0].count) === 0) {
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    throw error;
  }
}

export { pool };
