#!/usr/bin/env node

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ DATABASE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Railway');
  process.exit(1);
}

console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Railway...');
console.log('DATABASE_URL:', DATABASE_URL.replace(/\/\/.*@/, '//***:***@')); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å

const pool = new Pool({ connectionString: DATABASE_URL });

async function quickImport() {
  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        description TEXT,
        slug VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS plants (
        id SERIAL PRIMARY KEY,
        name VARCHAR(200) NOT NULL,
        slug VARCHAR(200) UNIQUE NOT NULL,
        description TEXT,
        short_description TEXT,
        category VARCHAR(100),
        light_requirements VARCHAR(50),
        is_medicinal BOOLEAN DEFAULT FALSE,
        is_honey_plant BOOLEAN DEFAULT FALSE,
        is_evergreen BOOLEAN DEFAULT FALSE,
        is_roof_suitable BOOLEAN DEFAULT FALSE,
        is_ground_cover BOOLEAN DEFAULT FALSE,
        has_aroma BOOLEAN DEFAULT FALSE,
        height_min INTEGER,
        height_max INTEGER,
        price DECIMAL(10,2),
        image_url VARCHAR(500),
        characteristics JSONB,
        is_available BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

    // 2. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await pool.query('DELETE FROM plants');
    await pool.query('DELETE FROM categories');
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

    // 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è
    console.log('üå± –ò–º–ø–æ—Ä—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π...');
    const plantsPath = path.join(__dirname, '..', 'data', 'plants.json');
    const plants = JSON.parse(fs.readFileSync(plantsPath, 'utf8'));

    let imported = 0;
    for (const plant of plants) {
      const slug = plant.slug || plant.name.toLowerCase()
        .replace(/[^a-z0-9–∞-—è]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');

      await pool.query(`
        INSERT INTO plants (
          name, slug, description, short_description, category,
          light_requirements, is_medicinal, is_honey_plant, is_evergreen,
          is_roof_suitable, is_ground_cover, has_aroma,
          height_min, height_max, price, image_url, characteristics
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
      `, [
        plant.name,
        slug,
        plant.description || '',
        plant.short_description || '',
        plant.category || '',
        plant.light_requirements || null,
        plant.is_medicinal || false,
        plant.is_honey_plant || false,
        plant.is_evergreen || false,
        plant.is_roof_suitable || false,
        plant.is_ground_cover || false,
        plant.has_aroma || false,
        plant.height_min || null,
        plant.height_max || null,
        plant.price || null,
        plant.image_url || null,
        JSON.stringify(plant.characteristics || {})
      ]);
      
      imported++;
      if (imported % 100 === 0) {
        console.log(`üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported}/${plants.length} —Ä–∞—Å—Ç–µ–Ω–∏–π...`);
      }
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported} —Ä–∞—Å—Ç–µ–Ω–∏–π`);

    // 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üìÇ –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const categoriesPath = path.join(__dirname, '..', 'data', 'categories.json');
    const categories = JSON.parse(fs.readFileSync(categoriesPath, 'utf8'));

    for (const category of categories) {
      await pool.query(`
        INSERT INTO categories (name, slug, description)
        VALUES ($1, $2, $3)
      `, [category.name, category.slug, category.description]);
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const plantCount = await pool.query('SELECT COUNT(*) FROM plants');
    const categoryCount = await pool.query('SELECT COUNT(*) FROM categories');
    
    console.log('üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –†–∞—Å—Ç–µ–Ω–∏–π: ${plantCount.rows[0].count}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

quickImport();
