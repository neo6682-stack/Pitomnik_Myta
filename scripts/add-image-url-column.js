const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER || 'dmitryrudenkov',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'pitomnik_myta',
  password: process.env.DB_PASSWORD || '',
  port: parseInt(process.env.DB_PORT || '5432'),
});

async function addImageUrlColumn() {
  try {
    console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É image_url –≤ —Ç–∞–±–ª–∏—Ü—É plants...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
    const checkColumn = await pool.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'plants' AND column_name = 'image_url'
    `);
    
    if (checkColumn.rows.length === 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É image_url
      await pool.query(`
        ALTER TABLE plants 
        ADD COLUMN image_url VARCHAR(500)
      `);
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ image_url –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } else {
      console.log('‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ image_url —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:', error.message);
  } finally {
    await pool.end();
  }
}

addImageUrlColumn();
