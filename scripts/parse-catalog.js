const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º–Ω–∏–∫–µ
const NURSERY_INFO = {
  name: "–ü–∏—Ç–æ–º–Ω–∏–∫ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö —Ü–≤–µ—Ç–æ–≤ –∏ —Ç—Ä–∞–≤ \"–ú–Ø–¢–ê\"",
  location: "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ù–µ–∫–ª–∏–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, —Å–µ–ª–æ –ù–∏–∫–æ–ª–∞–µ–≤–∫–∞",
  contacts: {
    phone: "+7 918 55 28 423",
    contact_person: "–ò—Ä–∏–Ω–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞",
    email: "Mytapitomnik@mail.ru"
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
function normalizeString(str) {
  if (!str) return '';
  return str.toString().trim().replace(/\s+/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–∞—Å—Ç–µ–Ω–∏—è
function analyzePlantCharacteristics(name, description) {
  const text = `${name} ${description}`.toLowerCase();
  
  return {
    is_honey_plant: /–º–µ–¥–æ–Ω–æ—Å|–ø—á–µ–ª|–º–µ–¥|–Ω–µ–∫—Ç–∞—Ä/i.test(text),
    is_evergreen: /–≤–µ—á–Ω–æ–∑–µ–ª–µ–Ω|–∑–∏–º–Ω–µ–∑–µ–ª–µ–Ω|–∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω/i.test(text),
    is_roof_suitable: /–∫—Ä—ã—à|–Ω–∏–∑–∫–æ—Ä–æ—Å–ª|–ø–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω|—Å—Ç–µ–ª—é—â/i.test(text),
    is_ground_cover: /–ø–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω|—Å—Ç–µ–ª—é—â|–∫–æ–≤—Ä–æ–≤/i.test(text),
    has_aroma: /–∞—Ä–æ–º–∞—Ç|–¥—É—à–∏—Å—Ç|–ø–∞—Ö—É—á|–∑–∞–ø–∞—Ö/i.test(text),
    is_medicinal: /–ª–µ—á–µ–±–Ω|–º–µ–¥–∏—Ü–∏–Ω—Å–∫|—Ü–µ–ª–µ–±–Ω|–ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω/i.test(text)
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–≤–µ—Ç—É
function determineLightRequirements(description) {
  if (!description) return 'partial_shade';
  
  const text = description.toLowerCase();
  
  if (/—Å–æ–ª–Ω—Ü|—Å–≤–µ—Ç–ª|–æ—Ç–∫—Ä—ã—Ç/i.test(text)) {
    return 'sun';
  } else if (/—Ç–µ–Ω—å|—Ç–µ–Ω–µ–≤|–∑–∞—Ç–µ–Ω–µ–Ω/i.test(text)) {
    return 'shade';
  } else {
    return 'partial_shade';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug
function createSlug(name) {
  return name
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim('-');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Ü–≤–µ—Ç–µ–Ω–∏—è
function extractFloweringPeriod(description) {
  if (!description) return '';
  
  const text = description.toLowerCase();
  const months = {
    '—è–Ω–≤–∞—Ä': '—è–Ω–≤–∞—Ä—å',
    '—Ñ–µ–≤—Ä–∞–ª': '—Ñ–µ–≤—Ä–∞–ª—å', 
    '–º–∞—Ä—Ç': '–º–∞—Ä—Ç',
    '–∞–ø—Ä–µ–ª': '–∞–ø—Ä–µ–ª—å',
    '–º–∞–π': '–º–∞–π',
    '–∏—é–Ω': '–∏—é–Ω—å',
    '–∏—é–ª': '–∏—é–ª—å',
    '–∞–≤–≥—É—Å—Ç': '–∞–≤–≥—É—Å—Ç',
    '—Å–µ–Ω—Ç—è–±—Ä': '—Å–µ–Ω—Ç—è–±—Ä—å',
    '–æ–∫—Ç—è–±—Ä': '–æ–∫—Ç—è–±—Ä—å',
    '–Ω–æ—è–±—Ä': '–Ω–æ—è–±—Ä—å',
    '–¥–µ–∫–∞–±—Ä': '–¥–µ–∫–∞–±—Ä—å'
  };
  
  const foundMonths = [];
  for (const [key, month] of Object.entries(months)) {
    if (text.includes(key)) {
      foundMonths.push(month);
    }
  }
  
  return foundMonths.join(', ');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
function parseCatalog() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π...');
    
    const catalogPath = path.join(__dirname, '../plants_catalog/–ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π _ –æ—Å—Ç–∞—Ç–∫–∏ –û—Å–µ–Ω—å 2025 _ 29.09.xlsx');
    
    if (!fs.existsSync(catalogPath)) {
      throw new Error(`–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${catalogPath}`);
    }
    
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = XLSX.readFile(catalogPath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rawData.length} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ`);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', rawData[0]);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
    const headers = rawData[0];
    const columnIndexes = {
      name: 1, // '–ù–∞–∑–≤–∞–Ω–∏–µ'
      plant_color: 2, // '–¶–≤–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è'
      flower_color: 3, // '–¶–≤–µ—Ç —Ü–≤–µ—Ç–∫–∞'
      height: 4, // '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è'
      light_requirements: 5, // '–°—Ä–µ–¥–∞ –¥–ª—è –∂–∏–∑–Ω–∏ (—Å–æ–ª–Ω—Ü–µ/–ø–æ–ª—É—Ç–µ–Ω—å/—Ç–µ–Ω—å)'
      flowering_time: 6, // '–í—Ä–µ–º—è —Ü–≤–µ—Ç–µ–Ω–∏—è'
      care: 7, // '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —É—Ö–æ–¥'
      coastal_climate: 8, // '–í—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫–ª–∏–º–∞—Ç / –∏–ª–∏ –Ω–µ—Ç'
      honey_plant: 9, // '–ú–µ–¥–æ–Ω–æ—Å / –∏–ª–∏ –Ω–µ—Ç'
      evergreen: 10, // '–í–µ—á–Ω–æ –∑–µ–ª–µ–Ω–æ–µ / –∏–ª–∏ –Ω–µ—Ç'
      roof_suitable: 11, // '–î–ª—è –æ–∑–µ–ª–µ–Ω–µ–Ω–∏—è –∫—Ä—ã—à / –∏–ª–∏ –Ω–µ—Ç'
      ground_cover: 12, // '–ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω–æ–µ / –∏–ª–∏ –Ω–µ—Ç'
      aroma_type: 13, // '–¢–∏–ø –∞—Ä–æ–º–∞—Ç–∞'
      floristic_cut: 14, // '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ä–µ–∑–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∏ / –∏–ª–∏ –Ω–µ—Ç'
      dried_flower: 15 // '–°—É—Ö–æ—Ü–≤–µ—Ç / –∏–ª–∏ –Ω–µ—Ç'
    };
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:', columnIndexes);
    
    const plants = [];
    const categories = new Set();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
    for (let i = 1; i < rawData.length; i++) {
      const row = rawData[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!row || row.every(cell => !cell)) continue;
      
      const name = normalizeString(row[columnIndexes.name]);
      if (!name) continue;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
      const plantColor = normalizeString(row[columnIndexes.plant_color]);
      const flowerColor = normalizeString(row[columnIndexes.flower_color]);
      const height = normalizeString(row[columnIndexes.height]);
      const lightReq = normalizeString(row[columnIndexes.light_requirements]);
      const floweringTime = normalizeString(row[columnIndexes.flowering_time]);
      const care = normalizeString(row[columnIndexes.care]);
      const coastalClimate = normalizeString(row[columnIndexes.coastal_climate]);
      const honeyPlant = normalizeString(row[columnIndexes.honey_plant]);
      const evergreen = normalizeString(row[columnIndexes.evergreen]);
      const roofSuitable = normalizeString(row[columnIndexes.roof_suitable]);
      const groundCover = normalizeString(row[columnIndexes.ground_cover]);
      const aromaType = normalizeString(row[columnIndexes.aroma_type]);
      const floristicCut = normalizeString(row[columnIndexes.floristic_cut]);
      const driedFlower = normalizeString(row[columnIndexes.dried_flower]);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      let category = '–ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–∫–∏';
      if (honeyPlant && honeyPlant.toLowerCase().includes('–¥–∞')) {
        category = '–ú–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è';
      } else if (evergreen && evergreen.toLowerCase().includes('–¥–∞')) {
        category = '–í–µ—á–Ω–æ–∑–µ–ª–µ–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è';
      } else if (roofSuitable && roofSuitable.toLowerCase().includes('–¥–∞')) {
        category = '–†–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∫—Ä—ã—à';
      } else if (groundCover && groundCover.toLowerCase().includes('–¥–∞')) {
        category = '–ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è';
      }
      
      categories.add(category);
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const descriptionParts = [];
      if (plantColor) descriptionParts.push(`–¶–≤–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è: ${plantColor}`);
      if (flowerColor) descriptionParts.push(`–¶–≤–µ—Ç —Ü–≤–µ—Ç–∫–∞: ${flowerColor}`);
      if (height) descriptionParts.push(`–í—ã—Å–æ—Ç–∞: ${height}`);
      if (floweringTime) descriptionParts.push(`–í—Ä–µ–º—è —Ü–≤–µ—Ç–µ–Ω–∏—è: ${floweringTime}`);
      if (care) descriptionParts.push(`–£—Ö–æ–¥: ${care}`);
      if (coastalClimate) descriptionParts.push(`–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫–ª–∏–º–∞—Ç: ${coastalClimate}`);
      if (aromaType) descriptionParts.push(`–ê—Ä–æ–º–∞—Ç: ${aromaType}`);
      
      const description = descriptionParts.join('. ');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
      const isHoneyPlant = honeyPlant && honeyPlant.toLowerCase().includes('–¥–∞');
      const isEvergreen = evergreen && evergreen.toLowerCase().includes('–¥–∞');
      const isRoofSuitable = roofSuitable && roofSuitable.toLowerCase().includes('–¥–∞');
      const isGroundCover = groundCover && groundCover.toLowerCase().includes('–¥–∞');
      const hasAroma = aromaType && aromaType.toLowerCase() !== '–Ω–µ—Ç' && aromaType.toLowerCase() !== '–Ω/–¥';
      const isFloristicCut = floristicCut && floristicCut.toLowerCase().includes('–¥–∞');
      const isDriedFlower = driedFlower && driedFlower.toLowerCase().includes('–¥–∞');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–µ—Ç—É
      let lightRequirements = 'partial_shade';
      if (lightReq) {
        if (lightReq.toLowerCase().includes('—Å–æ–ª–Ω—Ü–µ')) {
          lightRequirements = 'sun';
        } else if (lightReq.toLowerCase().includes('—Ç–µ–Ω—å')) {
          lightRequirements = 'shade';
        }
      }
      
      // –ü–∞—Ä—Å–∏–º –≤—ã—Å–æ—Ç—É
      let heightMin = null, heightMax = null;
      if (height) {
        const heightMatch = height.match(/(\d+)\s*-\s*(\d+)/);
        if (heightMatch) {
          heightMin = parseInt(heightMatch[1]);
          heightMax = parseInt(heightMatch[2]);
        } else {
          const singleHeight = height.match(/(\d+)/);
          if (singleHeight) {
            heightMin = parseInt(singleHeight[1]);
            heightMax = parseInt(singleHeight[1]);
          }
        }
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
      let basePrice = 150; // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
      if (isHoneyPlant) basePrice += 50;
      if (isEvergreen) basePrice += 100;
      if (hasAroma) basePrice += 75;
      if (isFloristicCut) basePrice += 50;
      if (isDriedFlower) basePrice += 25;
      
      const plant = {
        id: i,
        name: name,
        scientific_name: '', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
        description: description,
        short_description: description.length > 150 ? description.substring(0, 150) + '...' : description,
        category: category,
        
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        light_requirements: lightRequirements,
        is_medicinal: false, // –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–∞–π–ª–µ
        is_honey_plant: isHoneyPlant,
        is_evergreen: isEvergreen,
        is_roof_suitable: isRoofSuitable,
        is_ground_cover: isGroundCover,
        has_aroma: hasAroma,
        is_floristic_cut: isFloristicCut,
        is_dried_flower: isDriedFlower,
        coastal_climate_resistant: coastalClimate && coastalClimate.toLowerCase().includes('–¥–∞'),
        
        // –†–∞–∑–º–µ—Ä—ã
        height_min: heightMin,
        height_max: heightMax,
        width_min: null,
        width_max: null,
        
        // –¶–≤–µ—Ç–µ–Ω–∏–µ
        flowering_period: floweringTime || '',
        flower_color: flowerColor || '',
        plant_color: plantColor || '',
        
        // –£—Ö–æ–¥
        watering_frequency: 'moderate', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        soil_type: 'any', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        frost_resistance: 'good', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        care_instructions: care || '',
        
        // –¶–µ–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏–µ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã)
        price: basePrice,
        wholesale_price: Math.round(basePrice * 0.8 * 100) / 100, // 20% —Å–∫–∏–¥–∫–∞ –¥–ª—è –æ–ø—Ç–∞
        stock_quantity: Math.floor(Math.random() * 20) + 1, // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 20
        is_available: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã
        
        // SEO
        slug: createSlug(name),
        meta_title: `${name} - –∫—É–ø–∏—Ç—å –≤ –ø–∏—Ç–æ–º–Ω–∏–∫–µ –ú–Ø–¢–ê`,
        meta_description: description || `–ö—É–ø–∏—Ç—å ${name} –≤ –ø–∏—Ç–æ–º–Ω–∏–∫–µ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö —Ü–≤–µ—Ç–æ–≤ –∏ —Ç—Ä–∞–≤ –ú–Ø–¢–ê. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.`,
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º–Ω–∏–∫–µ
        nursery: NURSERY_INFO,
        
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      plants.push(plant);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesList = Array.from(categories).map((name, index) => ({
      id: index + 1,
      name: name,
      description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π: ${name}`,
      slug: createSlug(name),
      parent_id: null,
      created_at: new Date().toISOString()
    }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const outputDir = path.join(__dirname, '../data');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è
    fs.writeFileSync(
      path.join(outputDir, 'plants.json'),
      JSON.stringify(plants, null, 2),
      'utf8'
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    fs.writeFileSync(
      path.join(outputDir, 'categories.json'),
      JSON.stringify(categoriesList, null, 2),
      'utf8'
    );
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = {
      parsed_at: new Date().toISOString(),
      nursery: NURSERY_INFO,
      statistics: {
        total_plants: plants.length,
        available_plants: plants.filter(p => p.is_available).length,
        categories_count: categoriesList.length,
        total_value: plants.reduce((sum, p) => sum + (p.price * p.stock_quantity), 0),
        honey_plants: plants.filter(p => p.is_honey_plant).length,
        evergreen_plants: plants.filter(p => p.is_evergreen).length,
        roof_suitable: plants.filter(p => p.is_roof_suitable).length,
        ground_cover: plants.filter(p => p.is_ground_cover).length,
        aromatic_plants: plants.filter(p => p.has_aroma).length,
        medicinal_plants: plants.filter(p => p.is_medicinal).length,
        floristic_cut: plants.filter(p => p.is_floristic_cut).length,
        dried_flowers: plants.filter(p => p.is_dried_flower).length,
        coastal_resistant: plants.filter(p => p.coastal_climate_resistant).length,
        sun_plants: plants.filter(p => p.light_requirements === 'sun').length,
        shade_plants: plants.filter(p => p.light_requirements === 'shade').length,
        partial_shade_plants: plants.filter(p => p.light_requirements === 'partial_shade').length
      },
      categories: categoriesList.map(c => c.name),
      price_range: {
        min: Math.min(...plants.map(p => p.price).filter(p => p > 0)),
        max: Math.max(...plants.map(p => p.price).filter(p => p > 0)),
        average: plants.reduce((sum, p) => sum + p.price, 0) / plants.length
      }
    };
    
    fs.writeFileSync(
      path.join(outputDir, 'parsing_report.json'),
      JSON.stringify(report, null, 2),
      'utf8'
    );
    
    console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–π: ${plants.length}`);
    console.log(`üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ: ${report.statistics.available_plants}`);
    console.log(`üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${report.statistics.total_value.toFixed(2)} —Ä—É–±.`);
    console.log(`\nüå± –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π:`);
    console.log(`üçØ –ú–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π: ${report.statistics.honey_plants}`);
    console.log(`üå≤ –í–µ—á–Ω–æ–∑–µ–ª–µ–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π: ${report.statistics.evergreen_plants}`);
    console.log(`üè† –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –∫—Ä—ã—à: ${report.statistics.roof_suitable}`);
    console.log(`üåø –ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã—Ö: ${report.statistics.ground_cover}`);
    console.log(`üå∏ –ê—Ä–æ–º–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π: ${report.statistics.aromatic_plants}`);
    console.log(`üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π: ${report.statistics.medicinal_plants}`);
    console.log(`‚úÇÔ∏è –î–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∏: ${report.statistics.floristic_cut}`);
    console.log(`üåæ –°—É—Ö–æ—Ü–≤–µ—Ç—ã: ${report.statistics.dried_flowers}`);
    console.log(`üåä –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫–ª–∏–º–∞—Ç: ${report.statistics.coastal_resistant}`);
    console.log(`\n‚òÄÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–µ—Ç—É:`);
    console.log(`‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ: ${report.statistics.sun_plants}`);
    console.log(`üå§Ô∏è –ü–æ–ª—É—Ç–µ–Ω—å: ${report.statistics.partial_shade_plants}`);
    console.log(`üåë –¢–µ–Ω—å: ${report.statistics.shade_plants}`);
    
    console.log('\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ data/:');
    console.log('- plants.json - –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π');
    console.log('- categories.json - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    console.log('- parsing_report.json - –æ—Ç—á–µ—Ç –æ –ø–∞—Ä—Å–∏–Ω–≥–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–∞–ª–æ–≥–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
parseCatalog();